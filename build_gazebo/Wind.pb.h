// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wind.proto

#ifndef PROTOBUF_Wind_2eproto__INCLUDED
#define PROTOBUF_Wind_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace physics_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Wind_2eproto();
void protobuf_AssignDesc_Wind_2eproto();
void protobuf_ShutdownFile_Wind_2eproto();

class Wind;

// ===================================================================

class Wind : public ::google::protobuf::Message {
 public:
  Wind();
  virtual ~Wind();

  Wind(const Wind& from);

  inline Wind& operator=(const Wind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wind& default_instance();

  void Swap(Wind* other);

  // implements Message ----------------------------------------------

  Wind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wind& from);
  void MergeFrom(const Wind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // required int64 time_usec = 2;
  inline bool has_time_usec() const;
  inline void clear_time_usec();
  static const int kTimeUsecFieldNumber = 2;
  inline ::google::protobuf::int64 time_usec() const;
  inline void set_time_usec(::google::protobuf::int64 value);

  // required .gazebo.msgs.Vector3d force = 3;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline const ::gazebo::msgs::Vector3d& force() const;
  inline ::gazebo::msgs::Vector3d* mutable_force();
  inline ::gazebo::msgs::Vector3d* release_force();
  inline void set_allocated_force(::gazebo::msgs::Vector3d* force);

  // @@protoc_insertion_point(class_scope:physics_msgs.msgs.Wind)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_force();
  inline void clear_has_force();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* frame_id_;
  ::google::protobuf::int64 time_usec_;
  ::gazebo::msgs::Vector3d* force_;
  friend void  protobuf_AddDesc_Wind_2eproto();
  friend void protobuf_AssignDesc_Wind_2eproto();
  friend void protobuf_ShutdownFile_Wind_2eproto();

  void InitAsDefaultInstance();
  static Wind* default_instance_;
};
// ===================================================================


// ===================================================================

// Wind

// required string frame_id = 1;
inline bool Wind::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wind::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wind::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wind::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& Wind::frame_id() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.frame_id)
  return *frame_id_;
}
inline void Wind::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.frame_id)
}
inline void Wind::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:physics_msgs.msgs.Wind.frame_id)
}
inline void Wind::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:physics_msgs.msgs.Wind.frame_id)
}
inline ::std::string* Wind::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.frame_id)
  return frame_id_;
}
inline ::std::string* Wind::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wind::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.frame_id)
}

// required int64 time_usec = 2;
inline bool Wind::has_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wind::set_has_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wind::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wind::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Wind::time_usec() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.time_usec)
  return time_usec_;
}
inline void Wind::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.time_usec)
}

// required .gazebo.msgs.Vector3d force = 3;
inline bool Wind::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wind::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wind::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wind::clear_force() {
  if (force_ != NULL) force_->::gazebo::msgs::Vector3d::Clear();
  clear_has_force();
}
inline const ::gazebo::msgs::Vector3d& Wind::force() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
inline ::gazebo::msgs::Vector3d* Wind::mutable_force() {
  set_has_force();
  if (force_ == NULL) force_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.force)
  return force_;
}
inline ::gazebo::msgs::Vector3d* Wind::release_force() {
  clear_has_force();
  ::gazebo::msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
inline void Wind::set_allocated_force(::gazebo::msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.force)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace physics_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Wind_2eproto__INCLUDED
