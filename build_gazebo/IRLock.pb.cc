// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRLock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IRLock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* IRLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IRLock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IRLock_2eproto() {
  protobuf_AddDesc_IRLock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IRLock.proto");
  GOOGLE_CHECK(file != NULL);
  IRLock_descriptor_ = file->message_type(0);
  static const int IRLock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, size_y_),
  };
  IRLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IRLock_descriptor_,
      IRLock::default_instance_,
      IRLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IRLock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IRLock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IRLock_descriptor_, &IRLock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IRLock_2eproto() {
  delete IRLock::default_instance_;
  delete IRLock_reflection_;
}

void protobuf_AddDesc_IRLock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014IRLock.proto\022\020sensor_msgs.msgs\"l\n\006IRLo"
    "ck\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsignature\030\002 \002(\005"
    "\022\r\n\005pos_x\030\003 \002(\002\022\r\n\005pos_y\030\004 \002(\002\022\016\n\006size_x"
    "\030\005 \002(\002\022\016\n\006size_y\030\006 \002(\002", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IRLock.proto", &protobuf_RegisterTypes);
  IRLock::default_instance_ = new IRLock();
  IRLock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IRLock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IRLock_2eproto {
  StaticDescriptorInitializer_IRLock_2eproto() {
    protobuf_AddDesc_IRLock_2eproto();
  }
} static_descriptor_initializer_IRLock_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IRLock::kTimeUsecFieldNumber;
const int IRLock::kSignatureFieldNumber;
const int IRLock::kPosXFieldNumber;
const int IRLock::kPosYFieldNumber;
const int IRLock::kSizeXFieldNumber;
const int IRLock::kSizeYFieldNumber;
#endif  // !_MSC_VER

IRLock::IRLock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.IRLock)
}

void IRLock::InitAsDefaultInstance() {
}

IRLock::IRLock(const IRLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.IRLock)
}

void IRLock::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_LONGLONG(0);
  signature_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  size_x_ = 0;
  size_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IRLock::~IRLock() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.IRLock)
  SharedDtor();
}

void IRLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IRLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IRLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IRLock_descriptor_;
}

const IRLock& IRLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IRLock_2eproto();
  return *default_instance_;
}

IRLock* IRLock::default_instance_ = NULL;

IRLock* IRLock::New() const {
  return new IRLock;
}

void IRLock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IRLock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_usec_, size_y_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IRLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.IRLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signature;
        break;
      }

      // required int32 signature = 2;
      case 2: {
        if (tag == 16) {
         parse_signature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signature_)));
          set_has_signature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 3;
      case 3: {
        if (tag == 29) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_size_x;
        break;
      }

      // required float size_x = 5;
      case 5: {
        if (tag == 45) {
         parse_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_x_)));
          set_has_size_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_size_y;
        break;
      }

      // required float size_y = 6;
      case 6: {
        if (tag == 53) {
         parse_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_y_)));
          set_has_size_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.IRLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.IRLock)
  return false;
#undef DO_
}

void IRLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.IRLock)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required int32 signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signature(), output);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // required float size_x = 5;
  if (has_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->size_x(), output);
  }

  // required float size_y = 6;
  if (has_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->size_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.IRLock)
}

::google::protobuf::uint8* IRLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.IRLock)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required int32 signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signature(), target);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // required float size_x = 5;
  if (has_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->size_x(), target);
  }

  // required float size_y = 6;
  if (has_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->size_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.IRLock)
  return target;
}

int IRLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_usec = 1;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_usec());
    }

    // required int32 signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signature());
    }

    // required float pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // required float pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // required float size_x = 5;
    if (has_size_x()) {
      total_size += 1 + 4;
    }

    // required float size_y = 6;
    if (has_size_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IRLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IRLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IRLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IRLock::MergeFrom(const IRLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_size_x()) {
      set_size_x(from.size_x());
    }
    if (from.has_size_y()) {
      set_size_y(from.size_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IRLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRLock::CopyFrom(const IRLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IRLock::Swap(IRLock* other) {
  if (other != this) {
    std::swap(time_usec_, other->time_usec_);
    std::swap(signature_, other->signature_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(size_x_, other->size_x_);
    std::swap(size_y_, other->size_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IRLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IRLock_descriptor_;
  metadata.reflection = IRLock_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
